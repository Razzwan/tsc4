{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice tSlice = text.begin_parse().skip_bits(32);

  if (shift == 0) {
    return begin_cell()
            .store_uint(0, 32)
            .store_slice(tSlice.preload_bits(tSlice.slice_bits()))
            .end_cell();
  }

  builder body = begin_cell();

  do {
    int bit = tSlice~load_int(8) - shift;
    if (bit < 32) {
      bit += 95;
    }
    body = store_int(body, bit, 8);
  } until (tSlice.slice_data_empty?());

  slice b = end_cell(body).begin_parse();
  return begin_cell()
          .store_uint(0, 32)
          .store_slice(b.preload_bits(b.slice_bits()))
          .end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice tSlice = text.begin_parse().skip_bits(32);

  if (shift == 0) {
    return begin_cell()
            .store_uint(0, 32)
            .store_slice(tSlice.preload_bits(tSlice.slice_bits()))
            .end_cell();
  }

  builder body = begin_cell();

  do {
    int bit = tSlice~load_int(8) + shift;
    if (bit > 126) {
      bit -= 95;
    }
    body = store_int(body, bit, 8);
  } until (tSlice.slice_data_empty?());

  slice b = end_cell(body).begin_parse();
  return begin_cell()
          .store_uint(0, 32)
          .store_slice(b.preload_bits(b.slice_bits()))
          .end_cell();
}

