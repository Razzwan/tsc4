{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

const MAX_ASCII = 256;
const MIN_ASCII = 0;
const SHIFT_TO_RIGHT = -1;

(slice) shift_slice(int shift, slice tSlice) {
  builder body = begin_cell();

  do {
    int bit = tSlice~load_int(8);
    if (SHIFT_TO_RIGHT) {
      bit -= shift;
    } else {
      bit += shift;
    }

    if (bit >= MAX_ASCII) {
      bit -= MAX_ASCII - MIN_ASCII;
    }

    if (bit < MIN_ASCII) {
      bit += MAX_ASCII - MIN_ASCII;
    }

    body = store_int(body, bit, 8);
  } until (tSlice.slice_data_empty?());

  ifnot (tSlice.slice_refs_empty?()) {
    slice ref = shift_slice(shift, tSlice.preload_ref().begin_parse());
    body = store_ref(body, begin_cell().store_slice(ref).end_cell());
  }

  return body.end_cell().begin_parse();
}

(cell) shift_text(int shift, cell text) {
  if (shift == 0) {
    return text;
  }

  slice tSlice = text.begin_parse().skip_bits(32);
  return begin_cell()
          .store_uint(0, 32)
          .store_slice(shift_slice(shift, tSlice))
          .end_cell();
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  return shift_text(shift, text);
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  return shift_text(shift, text);
}

